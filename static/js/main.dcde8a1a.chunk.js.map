{"version":3,"sources":["utils/object-helper.ts","features/Users/userReducer.ts","assets/preloader/Spinner.gif","components/preloader/Preloader.tsx","features/Profile/Profile.module.css","Api/api.tsx","features/Navbar/Navbar.module.css","features/Login/authMeReducer.ts","App/appReducer.tsx","features/Profile/profilePageReducer.tsx","features/Dialogs/dialogsPageReducer.ts","App/redux-store.ts","features/Header/Header.tsx","features/Header/HeaderContainer.tsx","components/FormControls/FormControls.tsx","utils/validators.tsx","features/Login/Login.tsx","features/Navbar/Navbar.tsx","features/Profile/MyPosts/Post/Post.tsx","features/Profile/MyPosts/MyPosts.tsx","features/Profile/MyPosts/MyPostsContainer.tsx","features/Profile/ProfileInfo/ProfieStatus/ProfileStatus.tsx","features/Profile/ProfileInfo/ProfileInfo.tsx","features/Profile/Profile.tsx","features/Profile/ProfileContainer.tsx","features/Dialogs/Messages/Messages.tsx","features/Dialogs/Dialogs.tsx","features/Dialogs/DialogsContainer.tsx","App/App.tsx","components/HOC/withSuspense.tsx","index.tsx","features/Dialogs/Dialogs.module.css","features/Profile/MyPosts/Post/Post.module.css","components/HOC/withAuthRedirect.tsx","features/Header/Header.module.css","components/FormControls/FormControls.module.css","features/Profile/MyPosts/MyPosts.module.css"],"names":["updateObjectInArray","items","itemId","objectPropName","newObjectProps","map","u","updateUsers","users","type","UPDATE_USERS","changeCurrentPage","page","SET_CURRENT_PAGE","setTotalUsersCount","totalCount","SET_TOTAL_USERS_COUNT","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","isFollowingAC","userId","IS_FOLLOWING","UNFOLLOW","FOLLOW","initialState","pageSize","totalUsersCount","currentPage","isFollowing","userPageReducer","state","action","id","followed","filter","getUsersThunk","dispatch","a","usersAPI","getUsers","res","onPageChanged","p","unFollow","resultCode","follow","data","Preloader","src","preloader","module","exports","instance","axios","create","withCredentials","baseURL","headers","process","REACT_APP_API_KEY","get","then","responce","authUser","delete","response","post","login","email","password","rememberMe","logout","profileAPI","getProfile","getStatus","updateStatus","status","put","setLogin","isAuth","SET_LOGIN","messages","SET_INITIALIZED","initialized","setUserProfileAC","profile","SET_USER_PROFILE","setStatusAC","SET_STATUS","ADD_POST","posts","message","like","newPostText","SEND_MESSEGE","dialogs","name","rootReducer","combineReducers","profilePage","Date","getTime","dialogsPage","newMessage","userPage","auth","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","props","className","s","header","loginBlok","onClick","to","HeaderContainer","this","authMe","React","Component","connect","Textarea","input","meta","isError","touched","error","style","span","Input","required","value","maxLengthCreator","maxLength","length","createField","placeholder","component","validator","text","Field","validate","LoginReduxForm","reduxForm","onSubmit","handleSubmit","color","stopSubmit","_error","formData","Navbar","nav","item","activeClassName","active","Post","wrapper","ava","MyPosts","postData","AddPostsFormContainer","values","addPost","maxLength30","MyPostsContainer","AddPostAC","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateStatusTC","onChangeHandler","e","currentTarget","prevProps","prevState","onDoubleClick","onBlur","onChange","autoFocus","ProfileInfo","photos","large","Profile","ProfileContainer","match","params","setStatusTC","withRouter","withAuthRedirect","Messages","Dialog","dialog","maxLength50","DialogAddMessageForm","textarea","Dialogs","dialogElement","d","messagesElement","m","dialogsItems","grids","sendMessage","newMessageText","DialogsContainer","sendMessageAC","UsersContainer","lazy","App","initializeApp","path","render","Suspense","fallback","Login","ReactDOM","StrictMode","document","getElementById","mstp","resProps"],"mappings":"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","file":"static/js/main.dcde8a1a.chunk.js","sourcesContent":["export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: number,\r\n  objectPropName: string,\r\n  newObjectProps: any\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objectPropName] === itemId) {\r\n      return { ...u, ...newObjectProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { usersAPI } from '../../Api/api';\r\nimport { AppThunkType } from '../../App/redux-store';\r\nimport { updateObjectInArray } from '../../utils/object-helper';\r\n\r\nexport type UserPeducerActionType =\r\n    followActionType\r\n    | unFollowActionType\r\n    | updateUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalUsersCountActionType\r\n    | toggleIsFetchingActionType\r\n    | isFollowingActionType\r\n\r\nexport type followActionType = ReturnType<typeof onUnFollow>\r\nexport type unFollowActionType = ReturnType<typeof onFollow>\r\nexport type updateUsersActionType = ReturnType<typeof updateUsers>\r\nexport type setCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type setTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type toggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type isFollowingActionType = ReturnType<typeof isFollowingAC>\r\n\r\n\r\n\r\n\r\n\r\nexport const onUnFollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        id\r\n    } as const\r\n}\r\nexport const onFollow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        id\r\n    } as const\r\n}\r\nexport const updateUsers = (users: Array<UsersType>) => {\r\n    return {\r\n        type: UPDATE_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalCount\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const isFollowingAC = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: IS_FOLLOWING,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UPDATE_USERS = \"UPDATE_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst IS_FOLLOWING = \"IS_FOLLOWING\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: { small: null, large: null }\r\n    status: null\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    pageSize: 30,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: []\r\n}\r\n\r\nexport const userPageReducer = (state: UsersPageType = initialState, action: UserPeducerActionType): UsersPageType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", { followed: true })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", { followed: false })\r\n            }\r\n        case 'UPDATE_USERS':\r\n            return { ...state, users: action.users }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return { ...state, currentPage: action.page }\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return { ...state, totalUsersCount: action.totalCount }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return { ...state, isFetching: action.isFetching }\r\n        case 'IS_FOLLOWING':\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    try {\r\n        const res = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(updateUsers(res.items))\r\n        dispatch(setTotalUsersCount(res.totalCount))\r\n        dispatch(toggleIsFetching(false))\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const onPageChanged = (p: number, pageSize: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(changeCurrentPage(p))\r\n    try {\r\n        const res = await usersAPI.getUsers(p, pageSize)\r\n        dispatch(updateUsers(res.items))\r\n        dispatch(toggleIsFetching(false))\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n// dry refactor this\r\nexport const unFollow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(isFollowingAC(true, userId))\r\n    try {\r\n        const res = await usersAPI.unFollow(userId)\r\n        if (res.resultCode === 0) {\r\n            dispatch(onUnFollow(userId))\r\n            dispatch(isFollowingAC(false, userId));\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(isFollowingAC(true, userId));\r\n    try {\r\n        const res = await usersAPI.follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(onFollow(userId))\r\n            dispatch(isFollowingAC(false, userId));\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/Spinner.f22d5cb7.gif\";","import React, { ChangeEvent } from \"react\";\r\nimport preloader from \"../../assets/preloader/Spinner.gif\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} />\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__E7ZBA\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": process.env.REACT_APP_API_KEY\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => responce.data);\r\n    },\r\n    authUser() {\r\n        return instance.get('auth/me')\r\n            .then(responce => responce.data)\r\n    },\r\n    unFollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`, {})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | string) {\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number | string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', { status })\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1kmui\",\"item\":\"Navbar_item__VZGGj\",\"active\":\"Navbar_active__23E5C\"};","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { usersAPI } from '../../Api/api';\r\nimport { AppThunkType } from '../../App/redux-store';\r\n\r\n\r\nexport type AuthMeActionTypes =\r\n    setLoginActionType\r\n\r\n\r\nexport type setLoginActionType = ReturnType<typeof setLogin>\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setLogin = (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n) => {\r\n    return {\r\n        type: SET_LOGIN,\r\n        data: { id, email, login },\r\n        isAuth: isAuth\r\n    } as const\r\n}\r\n\r\nconst SET_LOGIN = \"SET_LOGIN\"\r\n\r\n\r\nexport type AythReducerType = {\r\n    resultCode: number | null\r\n    messages: [] | null\r\n    data: {\r\n        id: number | null\r\n        login: string | null\r\n        email: string | null\r\n    }\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: AythReducerType = {\r\n    resultCode: 0,\r\n    messages: [],\r\n    data: {\r\n        id: null,\r\n        login: null,\r\n        email: null\r\n    },\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AythReducerType = initialState, action: AuthMeActionTypes): AythReducerType => {\r\n    switch (action.type) {\r\n        case 'SET_LOGIN':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: action.isAuth\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const authMe = (): AppThunkType => async dispatch => {\r\n\r\n    try {\r\n        const res = await usersAPI.authUser()\r\n        if (res.resultCode === 0) {\r\n            let { id, email, login } = res.data;\r\n            dispatch(setLogin(id, email, login, true))\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.login(email, password, rememberMe)\r\n\r\n    if (res.data.resultCode === 0) {\r\n        usersAPI.authUser()\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    let { id, email, login } = res.data;\r\n                    dispatch(setLogin(id, email, login, true))\r\n                }\r\n            })\r\n    } else {\r\n\r\n        res.data.messages[0]\r\n            //@ts-ignore\r\n            ? dispatch(stopSubmit('login', { _error: res.data.messages[0] }))\r\n            //@ts-ignore\r\n            : dispatch(stopSubmit('login', { _error: 'Some Error' }))\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setLogin(null, null, null, false))\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { usersAPI } from '../Api/api';\r\nimport { AppThunkType } from './redux-store';\r\nimport { setLogin } from '../features/Login/authMeReducer';\r\n\r\n\r\nexport type AppActionType =\r\n    setInitializedActionType\r\n\r\n\r\nexport type setInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setInitialized = (\r\n    initialized: boolean\r\n) => {\r\n    return {\r\n        type: SET_INITIALIZED,\r\n        initialized\r\n    } as const\r\n}\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\n\r\n\r\nexport type AppReducerType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppReducerType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppReducerType = initialState, action: AppActionType): AppReducerType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: action.initialized\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.authUser()\r\n    if (res.resultCode === 0) {\r\n        let { id, email, login } = res.data;\r\n        dispatch(setLogin(id, email, login, true))\r\n        dispatch(setInitialized(true))\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { profileAPI } from '../../Api/api';\r\nimport { AppThunkType } from '../../App/redux-store';\r\nimport { PostsType } from './MyPosts/MyPosts';\r\n\r\n// for profile\r\n\r\nexport type AddPostActionType = ReturnType<typeof AddPostAC>\r\nexport type setUserProfileActionType = ReturnType<typeof setUserProfileAC>\r\n\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    profile: ProfileType | null\r\n    posts: PostsType[]\r\n    newPostText: string\r\n    status: string\r\n}\r\nexport type ProfilePageActionTypes =\r\n    | AddPostActionType\r\n    | setUserProfileActionType\r\n    | ReturnType<typeof setStatusAC>\r\n\r\n\r\n\r\nexport const AddPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfileAC = (profile: ProfileType | null) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\r\nconst SET_STATUS = \"SET_STATUS\"\r\n\r\n\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    profile: null,\r\n    posts: [\r\n        { id: 1, message: 'Love, awareness and full invetment !', like: 35 },\r\n        {\r\n            id: 2,\r\n            message:\r\n                \"What you are is God's gift to you, what you'll become is your gift to God.\",\r\n            like: 5535,\r\n        },\r\n        { id: 3, message: 'true love is never giving up!', like: 55 },\r\n    ],\r\n    newPostText: '',\r\n    status: \"\",\r\n}\r\n\r\nexport const profilePageReducer = (state: ProfilePageType = initialState, action: ProfilePageActionTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [{\r\n                    id: new Date().getTime(),\r\n                    message: action.newPostText,\r\n                    like: 0\r\n                }, ...state.posts],\r\n            };\r\n     \r\n        case 'SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getProfile = (userId: number | string): AppThunkType => async dispatch => {\r\n       const res = await profileAPI.getProfile(userId)\r\n                dispatch(setUserProfileAC(res))\r\n}\r\n\r\nexport const setStatusTC = (userId: number | string): AppThunkType  => async dispatch => {\r\n    const res = await profileAPI.getStatus(userId)\r\n        dispatch(setStatusAC(res))\r\n}\r\n\r\n\r\n\r\nexport const updateStatusTC = (status: string): AppThunkType  => async dispatch => {\r\n    const res = await profileAPI.updateStatus(status)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setStatusAC(status))\r\n            }\r\n}","import React from 'react';\r\nimport { AddPostActionType } from '../Profile/profilePageReducer';\r\n\r\n// for messege\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType[]\r\n    messages: MessagesType[]\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsActionTypes =\r\n    | AddPostActionType\r\n    | SendMessageActionType\r\n\r\n\r\nexport type SendMessageActionType = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (newMessage: string) => {\r\n    return {\r\n        type: 'SEND-MESSEGE',\r\n        newMessage\r\n    } as const\r\n}\r\n\r\n\r\n\r\nconst SEND_MESSEGE = \"SEND-MESSEGE\"\r\n\r\nconst initialState = {\r\n\r\n    dialogs: [\r\n        { id: 1, name: 'Tony Stark' },\r\n        { id: 2, name: 'Tony Robbins' },\r\n        { id: 3, name: 'Akzhol Ardakbek' },\r\n        { id: 4, name: 'Abkeev Arlan' },\r\n        { id: 5, name: 'Evgeny Mirzyanov' },\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'H' },\r\n        { id: 3, message: '1213' },\r\n        { id: 4, message: 'Hello' },\r\n    ],\r\n}\r\n\r\nexport const dialogsPageReducer =\r\n    (state: DialogsPageType = initialState, action: DialogsActionTypes) => {\r\n\r\n        switch (action.type) {\r\n            case SEND_MESSEGE:\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, {\r\n                        id: new Date().getTime(),\r\n                        message: action.newMessage,\r\n                    }]\r\n                }\r\n\r\n\r\n            default:\r\n                return state\r\n\r\n        }\r\n\r\n    }","import { AppActionType, appReducer } from './appReducer'\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunkMiddlewere, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {\r\n  ProfilePageActionTypes,\r\n  profilePageReducer,\r\n} from '../features/Profile/profilePageReducer'\r\nimport {\r\n  DialogsActionTypes,\r\n  dialogsPageReducer,\r\n} from '../features/Dialogs/dialogsPageReducer'\r\nimport {\r\n  userPageReducer,\r\n  UserPeducerActionType,\r\n} from '../features/Users/userReducer'\r\nimport { AuthMeActionTypes, authReducer } from '../features/Login/authMeReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profilePageReducer,\r\n  dialogsPage: dialogsPageReducer,\r\n  userPage: userPageReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n})\r\n\r\n//store type\r\n// export let store = createStore(rootReducer, applyMiddleware(thunkMiddlewere))\r\n\r\nexport type StoreType = typeof store\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type AppActionsType =\r\n  | AppActionType\r\n  | AuthMeActionTypes\r\n  | DialogsActionTypes\r\n  | ProfilePageActionTypes\r\n  | UserPeducerActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  AppStateType,\r\n  unknown,\r\n  AppActionsType\r\n>\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderPropsType = {\r\n    login: string | null\r\n    logout: () => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div>\r\n                <img src=\"https://seeklogo.com/images/F/for-family-sign-logo-570FC31D35-seeklogo.com.png\" />\r\n                <h2>FamilyTalk</h2>\r\n            </div>\r\n            <div className={s.loginBlok}>\r\n                {\r\n                    props.isAuth ?\r\n                     <div>\r\n                        {props.login} - <button onClick={props.logout}>Log out</button>\r\n                     </div> \r\n                     : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import axios from 'axios';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authMe } from '../../features/Login/authMeReducer';\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport {logout} from '../../features/Login/authMeReducer';\r\nimport Header from './Header';\r\n\r\n\r\ntype HeaderPropsType = mapStateToPropsType & mapDispatchtoPropsType;\r\n\r\ntype mapDispatchtoPropsType = {\r\n    authMe: () => void;\r\n    logout: () => void\r\n}\r\n\r\nexport class HeaderContainer extends React.Component<HeaderPropsType>  {\r\n    componentDidMount() {\r\n        this.props.authMe()\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Header login={this.props.login} logout={this.props.logout} isAuth={this.props.isAuth} />\r\n    }\r\n}\r\ntype mapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        login: state.auth.data.login,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { authMe, logout })(HeaderContainer)\r\n","import React, { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\r\nimport style from './FormControls.module.css'\r\n\r\n\r\n\r\nexport const Textarea: React.FC<any> = (\r\n    { input, meta, ...props }\r\n) => {\r\n    const isError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea\r\n                    {...input}\r\n                    {...props} />\r\n            </div>\r\n            {isError && <span className={style.span}>{meta.error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Input: React.FC<any> = (\r\n    { input, meta, ...props }\r\n) => {\r\n    const isError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input\r\n                    {...input}\r\n                    {...props} />\r\n            </div>\r\n            {isError && <span className={style.span}>{meta.error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Field } from 'redux-form';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} simbols!`;\r\n    return undefined;\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validator: any, props: any = {}, text: string = \"\") => {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validator}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport { Input } from '../../components/FormControls/FormControls';\r\nimport { createField, required } from '../../utils/validators';\r\nimport { login } from './authMeReducer';\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n\r\n    }\r\n    const isAuth = props.isAuth && <Redirect to=\"/Profile\" />\r\n    return (\r\n        <div>\r\n            {isAuth}\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n\r\n        </div>\r\n    )\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            {createField(\"Login\", \"email\", Input, [required],)}\r\n            {createField(\"password\", \"password\", Input, [required], { type: \"password\" })}\r\n            {createField(null, \"rememberMe\", Input, [], { type: \"checkbox\" }, \"remember me\")}\r\n            {\r\n                props.error && <div style={{ color: 'red' }}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\nconst mstp = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mstp, { login })(Login)","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}><NavLink to=\"/Profile\" activeClassName={s.active}>Profile</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Dialogs\" activeClassName={s.active}>Messages</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/News\" activeClassName={s.active}>News</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Music\" activeClassName={s.active}>Music</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Settings\" activeClassName={s.active}>Settings</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Users\" activeClassName={s.active}>Users</NavLink> </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { PostsType } from '../MyPosts';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    post: PostsType;\r\n}\r\n\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.ava}>\r\n                <img\r\n                    src=\"https://sun9-54.userapi.com/impg/c858532/v858532894/109aab/QgbYlClVvxk.jpg?size=1280x1280&quality=96&sign=0ffeb8dec673187ed8b61505eecf0cf0&type=album\" />\r\n            </div>\r\n            <div className={s.text}>\r\n                <h5>Abzal Suan</h5>\r\n                <div className={s.items}>\r\n                    <div className={s.message}>{props.post.message}</div>\r\n                    <div className={s.item}>like:{props.post.like}</div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators\";\r\nimport { Textarea } from \"../../../components/FormControls/FormControls\";\r\n\r\nexport type PostsType = {\r\n  id: number\r\n  message: string\r\n  like: number\r\n}\r\ntype MyPostsPropsType = {\r\n  posts: PostsType[];\r\n  addPost: (newPostText: string) => void\r\n};\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n  let postData = props.posts.map((post) => (\r\n    <Post key={post.id} post={post} />\r\n  ));\r\n\r\n\r\n\r\n  const onsubmitHandler = (values: FormDataType) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <AddPostsFormContainer onSubmit={onsubmitHandler} />\r\n      {postData}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPosts;\r\ntype FormDataType = {\r\n  newPostText: string\r\n}\r\n\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nexport const AddPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.addPost}>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          placeholder=\"Enter new post text\"\r\n          validate={[required, maxLength30]} />\r\n        <button>add post</button>\r\n      </div>\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\nconst AddPostsFormContainer = reduxForm<FormDataType>({\r\n  form: \"AddPostsForm\"\r\n})(AddPostsForm)","import React, { ChangeEvent } from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { AppStateType } from \"../../../App/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AddPostAC } from \"../profilePageReducer\";\r\n\r\ntype MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    addPost: (newPostText: string) => { dispatch(AddPostAC(newPostText)); },\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatusTC(this.state.status)\r\n    }\r\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        \r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n    \r\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { !this.state.editMode &&\r\n                    <div onDoubleClick={this.activateEditMode}>\r\n                        <span>{this.props.status}</span>\r\n                    </div>}\r\n                { this.state.editMode &&\r\n                    <div onBlur={this.deactivateEditMode}  >\r\n                        <input onChange={this.onChangeHandler} autoFocus type=\"text\" value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Preloader } from '../../../components/preloader/Preloader';\r\nimport { ProfileType } from '../profilePageReducer';\r\nimport { ProfileStatus } from './ProfieStatus/ProfileStatus';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <img src={props.profile.photos.large} />\r\n            <ProfileStatus status={props.status} updateStatusTC={props.updateStatusTC} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport { ProfileType } from './profilePageReducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC} />\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n","import axios from 'axios';\r\nimport React, { Props, ReactComponentElement, useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport Profile from './Profile';\r\nimport { ProfileType, setUserProfileAC, getProfile, setStatusTC, updateStatusTC } from '../Profile/profilePageReducer'\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../components/HOC/withAuthRedirect';\r\n\r\n\r\ntype ProfilePropsType = mapStatePropsType & mapDispatchPropsType;\r\n\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    setUserProfileAC: (profile: ProfileType | null) => void\r\n    getProfile: (userId: number | string) => void\r\n    setStatusTC: (userId: number | string) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = !this.props.match.params.userId ? 2 : this.props.match.params.userId;\r\n        this.props.getProfile(userId)\r\n        this.props.setStatusTC(userId)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                <Profile {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// export const ProfileContainer: React.FC<PropsType> = (props) => {\r\n\r\n//     const dispatch = useDispatch()\r\n\r\n//     useEffect(() => {\r\n//         let userId = !props.match.params.userId ? 2 : props.match.params.userId;\r\n//         dispatch(setStatusTC(userId))\r\n//     }, [])\r\n\r\n//     return (\r\n//         <div >\r\n//             <Profile {...props} />\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status\r\n})\r\n\r\n// export default withAuthRedirect(withRouter(connect(mapStateToProps, { setUserProfileAC, getProfile })(ProfileContainer)));\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { setUserProfileAC, getProfile, setStatusTC, updateStatusTC }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./Messages.module.css\";\r\n\r\n\r\n\r\ntype messagesPropsType = {\r\n  message: string\r\n};\r\n\r\nexport const Messages = (props: messagesPropsType) => {\r\n  return (\r\n    <div>\r\n      {props.message}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { Messages } from \"./Messages/Messages\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { DialogsPageType } from \"./dialogsPageReducer\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators\";\r\nimport { Textarea } from \"../../components/FormControls/FormControls\";\r\n\r\n\r\ntype PropsType = {\r\n  state: DialogsPageType\r\n  sendMessage: (newMessage: string) => void\r\n};\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n\r\n\r\n  let dialogElement = props.state.dialogs.map((d) =>\r\n    <Dialog id={d.id} name={d.name} />\r\n  );\r\n  let messagesElement = props.state.messages.map((m) =>\r\n    <Messages key={m.id} message={m.message} />\r\n  )\r\n\r\n\r\n\r\n  const onSubmitHandler = (values: FormDataType) => {\r\n    props.sendMessage(values.newMessageText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogElement}</div>\r\n      <div className={s.grids}>\r\n        <div className={s.messages}>\r\n          {messagesElement}\r\n        </div>\r\n        <DialogAddMessageForm onSubmit={onSubmitHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\nconst Dialog = (props: DialogType) => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={\"/Dialogs/\" + props.id}>{props.name} </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ntype FormDataType = {\r\n  newMessageText: string\r\n\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.textarea}>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newMessageText\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLength50]} />\r\n        <button> sent message</button>\r\n      </div>\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\n\r\nconst DialogAddMessageForm = reduxForm<FormDataType>({\r\n  // a unique name for the form\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { DialogsPageType, sendMessageAC } from \"./dialogsPageReducer\";\r\nimport { AppStateType } from \"../../App/redux-store\";\r\nimport { withAuthRedirect } from \"../../components/HOC/withAuthRedirect\";\r\n\r\ntype MapDispatchPropsType = {\r\n  sendMessage: (newMessage: string) => void\r\n};\r\n\r\ntype mapStatePropsType = {\r\n  state: DialogsPageType\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n  return {\r\n    state: state.dialogsPage,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    sendMessage: (newMessage: string) => { dispatch(sendMessageAC(newMessage)); }\r\n\r\n  }\r\n}\r\n\r\ntype DialogsContainerPropsType = mapStatePropsType & MapDispatchPropsType;\r\n\r\nexport class DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div >\r\n        <Dialogs {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(DialogsContainer));\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, withRouter } from \"react-router-dom\";\r\nimport HeaderContainer from \"../features/Header/HeaderContainer\";\r\nimport Login from \"../features/Login/Login\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { initializeApp } from \"./appReducer\";\r\nimport { AppStateType } from \"./redux-store\";\r\nimport Navbar from \"../features/Navbar/Navbar\";\r\nimport ProfileContainer from \"../features/Profile/ProfileContainer\";\r\nimport DialogsContainer from \"../features/Dialogs/DialogsContainer\";\r\nimport { withSuspense } from \"../components/HOC/withSuspense\";\r\n// import UsersContainer from \"../features/Users/UsersContainer\";\r\nconst UsersContainer = React.lazy(() => import('../features/Users/UsersContainer'));\r\n\r\n\r\ntype PropsType = {\r\n  initialized: boolean\r\n  initializeApp: () => void\r\n};\r\n\r\nclass App extends React.Component<PropsType>  {\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n  }\r\n  render() {\r\n    // if (!this.props.initialized) {\r\n    //   return <div>\r\n    //     <InitialScreen />\r\n    //   </div>\r\n    // }\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Route\r\n            path=\"/Profile/:userId?\"\r\n            render={() => (\r\n              <ProfileContainer />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/Dialogs\"\r\n            render={() => (\r\n              <DialogsContainer />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/Users\"\r\n            render={withSuspense(UsersContainer)}\r\n          />\r\n          <Route path=\"/Login\" component={Login} />\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nconst mstp = (state: AppStateType) => ({\r\n  initialized: state.app.initialized\r\n})\r\nexport default compose<React.ComponentType>(\r\n  connect(mstp, { initializeApp }),\r\n  withRouter,\r\n)(App)","import React from 'react'\r\n\r\n\r\nexport const withSuspense = (Component: any) => (props: any) => {\r\n    return <React.Suspense fallback={<div>Loading...</div>}>\r\n        <Component {...props} />\r\n    </React.Suspense>\r\n}\r\n","import \"./index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { AppStateType, store } from \"./App/redux-store\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App/App\";\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__bklIq\",\"grids\":\"Dialogs_grids__mJrxB\",\"textarea\":\"Dialogs_textarea__WbrPc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__2B242\",\"ava\":\"Post_ava__2UxNp\",\"message\":\"Post_message__otDn9\"};","import React, { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../../App/redux-store'\r\n\r\ntype mstpType = {\r\n    isAuth: boolean\r\n}\r\nconst mstp = (state: AppStateType): mstpType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mstpType) => {\r\n        let { isAuth, ...resProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/Login\"} />\r\n        return <Component {...resProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mstp)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3TZHZ\",\"loginBlok\":\"Header_loginBlok__2VMbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"FormControls_span__38QLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__1E_Yn\",\"addPost\":\"MyPosts_addPost__1d-K5\"};"],"sourceRoot":""}