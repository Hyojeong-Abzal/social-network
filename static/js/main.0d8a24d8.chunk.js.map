{"version":3,"sources":["assets/images/user.png","Api/api.tsx","utils/object-helper.ts","features/Users/userReducer.ts","features/Profile/Profile.module.css","components/InitialScreen/InitialScreen.module.css","features/Navbar/Navbar.module.css","features/Login/authMeReducer.ts","App/appReducer.tsx","features/Profile/profilePageReducer.tsx","features/Dialogs/dialogsPageReducer.ts","App/redux-store.ts","features/Header/Header.tsx","features/Header/HeaderContainer.tsx","components/FormControls/FormControls.tsx","utils/validators.tsx","features/Login/Login.tsx","features/Navbar/Navbar.tsx","features/Profile/MyPosts/Post/Post.tsx","features/Profile/MyPosts/MyPosts.tsx","features/Profile/MyPosts/MyPostsContainer.tsx","features/Profile/ProfileInfo/ProfieStatus/ProfileStatus.tsx","features/Profile/ProfileInfo/ProfieStatus/EditProfile.tsx","features/Profile/ProfileInfo/ProfieData/ProfileData.tsx","features/Profile/ProfileInfo/ProfileInfo.tsx","features/Profile/Profile.tsx","features/Profile/ProfileContainer.tsx","features/Dialogs/Messages/Messages.tsx","features/Dialogs/Dialogs.tsx","features/Dialogs/DialogsContainer.tsx","components/InitialScreen/InitialScreen.tsx","App/App.tsx","components/HOC/withSuspense.tsx","index.tsx","features/Dialogs/Dialogs.module.css","features/Profile/MyPosts/Post/Post.module.css","components/HOC/withAuthRedirect.tsx","assets/preloader/Spinner.gif","components/preloader/Preloader.tsx","features/Header/Header.module.css","components/FormControls/FormControls.module.css","features/Profile/MyPosts/MyPosts.module.css","features/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","responce","data","authUser","unFollow","userId","delete","response","follow","post","login","email","password","rememberMe","logout","profileAPI","getProfile","getStatus","res","updateStatus","status","put","savePhoto","photo","formData","FormData","append","updateProfile","profileData","updateObjectInArray","items","itemId","objectPropName","newObjectProps","map","u","updateUsers","users","type","UPDATE_USERS","changeCurrentPage","page","SET_CURRENT_PAGE","setTotalUsersCount","totalCount","SET_TOTAL_USERS_COUNT","toggleIsFetching","isFetching","TOGGLE_IS_FETCHING","isFollowingAC","IS_FOLLOWING","UNFOLLOW","FOLLOW","initialState","totalUsersCount","isFollowing","userPageReducer","state","action","id","followed","filter","getUsersThunk","dispatch","a","onPageChanged","p","resultCode","module","exports","setLogin","isAuth","SET_LOGIN","messages","SET_INITIALIZED","initialized","setUserProfileAC","profile","SET_USER_PROFILE","setStatusAC","SET_STATUS","ADD_POST","posts","message","like","newPostText","SEND_MESSEGE","dialogs","name","rootReducer","combineReducers","profilePage","Date","getTime","dialogsPage","newMessage","userPage","auth","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","props","className","s","header","src","loginBlok","onClick","to","HeaderContainer","this","authMe","React","Component","connect","Textarea","input","meta","isError","touched","error","style","span","Input","required","value","maxLengthCreator","maxLength","length","createField","placeholder","component","validator","text","Field","validate","LoginReduxForm","reduxForm","onSubmit","handleSubmit","color","stopSubmit","_error","Navbar","nav","item","activeClassName","active","Post","wrapper","ava","MyPosts","postData","AddPostsFormContainer","values","addPost","maxLength30","MyPostsContainer","AddPostAC","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateStatusTC","onChangeHandler","e","currentTarget","prevProps","prevState","onDoubleClick","onBlur","onChange","autoFocus","EditProfile","setEditMode","EditProfileFormRedux","initialValues","useSelector","Object","keys","contacts","key","ProfileData","isOwner","useState","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","useDispatch","useEffect","Preloader","photos","large","userPhoto","profilePhoto","target","files","Profile","ProfileContainer","userIds","match","params","parseInt","history","push","setStatusTC","refreshProfileIfo","getState","withRouter","withAuthRedirect","Messages","Dialog","dialog","maxLength50","DialogAddMessageForm","textarea","Dialogs","dialogElement","d","messagesElement","m","dialogsItems","grids","sendMessage","newMessageText","DialogsContainer","sendMessageAC","InitialScreen","UsersContainer","lazy","App","initializeApp","path","render","Suspense","fallback","Login","ReactDOM","StrictMode","document","getElementById","mstp","resProps","preloader"],"mappings":"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","file":"static/js/main.0d8a24d8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.10691648.png\";","import axios from \"axios\";\r\nimport { ProfileType } from \"../features/Profile/profilePageReducer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"e63f5bfc-9e87-4bfe-bfb0-c2fdad6af5c9\"\r\n    }\r\n})\r\n\r\n//process.env.REACT_APP_API_KEY\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => responce.data);\r\n    },\r\n    authUser() {\r\n        return instance.get('auth/me')\r\n            .then(responce => responce.data)\r\n    },\r\n    unFollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`, {})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | string) {\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number | string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', { status })\r\n    },\r\n    savePhoto(photo: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photo)\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateProfile(profileData: ProfileType) {\r\n        return instance.put('profile', profileData)\r\n    }\r\n}\r\n\r\n","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: number,\r\n  objectPropName: string,\r\n  newObjectProps: any\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objectPropName] === itemId) {\r\n      return { ...u, ...newObjectProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { usersAPI } from '../../Api/api';\r\nimport { AppThunkType } from '../../App/redux-store';\r\nimport { updateObjectInArray } from '../../utils/object-helper';\r\n\r\nexport type UserPeducerActionType =\r\n    followActionType\r\n    | unFollowActionType\r\n    | updateUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalUsersCountActionType\r\n    | toggleIsFetchingActionType\r\n    | isFollowingActionType\r\n\r\nexport type followActionType = ReturnType<typeof onUnFollow>\r\nexport type unFollowActionType = ReturnType<typeof onFollow>\r\nexport type updateUsersActionType = ReturnType<typeof updateUsers>\r\nexport type setCurrentPageActionType = ReturnType<typeof changeCurrentPage>\r\nexport type setTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type toggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type isFollowingActionType = ReturnType<typeof isFollowingAC>\r\n\r\n\r\n\r\n\r\n\r\nexport const onUnFollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        id\r\n    } as const\r\n}\r\nexport const onFollow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        id\r\n    } as const\r\n}\r\nexport const updateUsers = (users: Array<UsersType>) => {\r\n    return {\r\n        type: UPDATE_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const changeCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalCount\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const isFollowingAC = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: IS_FOLLOWING,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UPDATE_USERS = \"UPDATE_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst IS_FOLLOWING = \"IS_FOLLOWING\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: { small: null, large: null }\r\n    status: null\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    users: UsersType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    pageSize: 30,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: []\r\n}\r\n\r\nexport const userPageReducer = (state: UsersPageType = initialState, action: UserPeducerActionType): UsersPageType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", { followed: true })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.id, \"id\", { followed: false })\r\n            }\r\n        case 'UPDATE_USERS':\r\n            return { ...state, users: action.users }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return { ...state, currentPage: action.page }\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return { ...state, totalUsersCount: action.totalCount }\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return { ...state, isFetching: action.isFetching }\r\n        case 'IS_FOLLOWING':\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    try {\r\n        const res = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(updateUsers(res.items))\r\n        dispatch(setTotalUsersCount(res.totalCount))\r\n        dispatch(toggleIsFetching(false))\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const onPageChanged = (p: number, pageSize: number): AppThunkType => async dispatch => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(changeCurrentPage(p))\r\n    try {\r\n        const res = await usersAPI.getUsers(p, pageSize)\r\n        dispatch(updateUsers(res.items))\r\n        dispatch(toggleIsFetching(false))\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\n// dry refactor this\r\nexport const unFollow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(isFollowingAC(true, userId))\r\n    try {\r\n        const res = await usersAPI.unFollow(userId)\r\n        if (res.resultCode === 0) {\r\n            dispatch(onUnFollow(userId))\r\n            dispatch(isFollowingAC(false, userId));\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userId: number): AppThunkType => async dispatch => {\r\n    dispatch(isFollowingAC(true, userId));\r\n    try {\r\n        const res = await usersAPI.follow(userId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(onFollow(userId))\r\n            dispatch(isFollowingAC(false, userId));\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__E7ZBA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InitialScreen_wrapper__1eSm3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1kmui\",\"item\":\"Navbar_item__VZGGj\",\"active\":\"Navbar_active__23E5C\"};","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { usersAPI } from '../../Api/api';\r\nimport { AppThunkType } from '../../App/redux-store';\r\n\r\n\r\nexport type AuthMeActionTypes =\r\n    setLoginActionType\r\n\r\n\r\nexport type setLoginActionType = ReturnType<typeof setLogin>\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setLogin = (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n) => {\r\n    return {\r\n        type: SET_LOGIN,\r\n        data: { id, email, login },\r\n        isAuth: isAuth\r\n    } as const\r\n}\r\n\r\nconst SET_LOGIN = \"SET_LOGIN\"\r\n\r\n\r\nexport type AythReducerType = {\r\n    resultCode: number | null\r\n    messages: [] | null\r\n    data: {\r\n        id: number | null\r\n        login: string | null\r\n        email: string | null\r\n    }\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: AythReducerType = {\r\n    resultCode: 0,\r\n    messages: [],\r\n    data: {\r\n        id: null,\r\n        login: null,\r\n        email: null\r\n    },\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AythReducerType = initialState, action: AuthMeActionTypes): AythReducerType => {\r\n    switch (action.type) {\r\n        case 'SET_LOGIN':\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth: action.isAuth\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const authMe = (): AppThunkType => async dispatch => {\r\n\r\n    try {\r\n        const res = await usersAPI.authUser()\r\n        if (res.resultCode === 0) {\r\n            let { id, email, login } = res.data;\r\n            dispatch(setLogin(id, email, login, true))\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.login(email, password, rememberMe)\r\n\r\n    if (res.data.resultCode === 0) {\r\n        usersAPI.authUser()\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    let { id, email, login } = res.data;\r\n                    dispatch(setLogin(id, email, login, true))\r\n                }\r\n            })\r\n    } else {\r\n\r\n        res.data.messages[0]\r\n            //@ts-ignore\r\n            ? dispatch(stopSubmit('login', { _error: res.data.messages[0] }))\r\n            //@ts-ignore\r\n            : dispatch(stopSubmit('login', { _error: 'Some Error' }))\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.logout()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setLogin(null, null, null, false))\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { usersAPI } from '../Api/api';\r\nimport { AppThunkType } from './redux-store';\r\nimport { setLogin } from '../features/Login/authMeReducer';\r\n\r\n\r\nexport type AppActionType =\r\n    setInitializedActionType\r\n\r\n\r\nexport type setInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const setInitialized = (\r\n    initialized: boolean\r\n) => {\r\n    return {\r\n        type: SET_INITIALIZED,\r\n        initialized\r\n    } as const\r\n}\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\n\r\n\r\nexport type AppReducerType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppReducerType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppReducerType = initialState, action: AppActionType): AppReducerType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                initialized: action.initialized\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    const res = await usersAPI.authUser()\r\n    if (res.resultCode === 0) {\r\n        let { id, email, login } = res.data;\r\n        dispatch(setLogin(id, email, login, true))\r\n        dispatch(setInitialized(true))\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { profileAPI } from '../../Api/api';\r\nimport { AppStateType, AppThunkType, GetAppStateType } from '../../App/redux-store';\r\nimport { PostsType } from './MyPosts/MyPosts';\r\n\r\n\r\n\r\nexport type AddPostActionType = ReturnType<typeof AddPostAC>\r\nexport type setUserProfileActionType = ReturnType<typeof setUserProfileAC>\r\n\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    profile: ProfileType | null\r\n    posts: PostsType[]\r\n    newPostText: string\r\n    status: string\r\n}\r\nexport type ProfilePageActionTypes =\r\n    | AddPostActionType\r\n    | setUserProfileActionType\r\n    | ReturnType<typeof setStatusAC>\r\n\r\n\r\n\r\nexport const AddPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfileAC = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\r\nconst SET_STATUS = \"SET_STATUS\"\r\n\r\n\r\n\r\n\r\nconst initialState: ProfilePageType = {\r\n    profile: null,\r\n    posts: [\r\n        { id: 1, message: 'Love, awareness and full invetment !', like: 35 },\r\n        {\r\n            id: 2,\r\n            message:\r\n                \"What you are is God's gift to you, what you'll become is your gift to God.\",\r\n            like: 5535,\r\n        },\r\n        { id: 3, message: 'true love is never giving up!', like: 55 },\r\n    ],\r\n    newPostText: '',\r\n    status: \"\",\r\n}\r\n\r\nexport const profilePageReducer = (state: ProfilePageType = initialState, action: ProfilePageActionTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [{\r\n                    id: new Date().getTime(),\r\n                    message: action.newPostText,\r\n                    like: 0\r\n                }, ...state.posts],\r\n            };\r\n\r\n        case 'SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getProfile = (userId: number | string): AppThunkType => async dispatch => {\r\n    const res = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfileAC(res))\r\n}\r\n\r\nexport const setStatusTC = (userId: number | string): AppThunkType => async dispatch => {\r\n    const res = await profileAPI.getStatus(userId)\r\n    dispatch(setStatusAC(res))\r\n}\r\n\r\n\r\n\r\nexport const updateStatusTC = (status: string): AppThunkType => async (dispatch: Dispatch<ProfilePageActionTypes>) => {\r\n    const res = await profileAPI.updateStatus(status)\r\n\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setStatusAC(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (photo: any): AppThunkType => async (dispatch, getState: GetAppStateType) => {\r\n    const id = getState().auth.data.id\r\n    const res = await profileAPI.savePhoto(photo)\r\n    if (res.data.resultCode === 0) {\r\n        id && dispatch(getProfile(id))\r\n    }\r\n}\r\n\r\n\r\nexport const updateProfile = (profileData: ProfileType): AppThunkType => async (dispatch, getState: GetAppStateType) => {\r\n    const id = getState().auth.data.id\r\n    const res = await profileAPI.updateProfile(profileData)\r\n    if (res.data.resultCode === 0) {\r\n        id && dispatch(getProfile(id))\r\n    } else {\r\n       // fix if responce is bad\r\n    }\r\n}","import React from 'react';\r\nimport { AddPostActionType } from '../Profile/profilePageReducer';\r\n\r\n// for messege\r\nexport type DialogsPageType = {\r\n    dialogs: DialogsType[]\r\n    messages: MessagesType[]\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsActionTypes =\r\n    | AddPostActionType\r\n    | SendMessageActionType\r\n\r\n\r\nexport type SendMessageActionType = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (newMessage: string) => {\r\n    return {\r\n        type: 'SEND-MESSEGE',\r\n        newMessage\r\n    } as const\r\n}\r\n\r\n\r\n\r\nconst SEND_MESSEGE = \"SEND-MESSEGE\"\r\n\r\nconst initialState = {\r\n\r\n    dialogs: [\r\n        { id: 1, name: 'Tony Stark' },\r\n        { id: 2, name: 'Tony Robbins' },\r\n        { id: 3, name: 'Akzhol Ardakbek' },\r\n        { id: 4, name: 'Abkeev Arlan' },\r\n        { id: 5, name: 'Evgeny Mirzyanov' },\r\n    ],\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'H' },\r\n        { id: 3, message: '1213' },\r\n        { id: 4, message: 'Hello' },\r\n    ],\r\n}\r\n\r\nexport const dialogsPageReducer =\r\n    (state: DialogsPageType = initialState, action: DialogsActionTypes) => {\r\n\r\n        switch (action.type) {\r\n            case SEND_MESSEGE:\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, {\r\n                        id: new Date().getTime(),\r\n                        message: action.newMessage,\r\n                    }]\r\n                }\r\n\r\n\r\n            default:\r\n                return state\r\n\r\n        }\r\n\r\n    }","import { AppActionType, appReducer } from './appReducer'\r\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport thunkMiddlewere, { ThunkAction } from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {\r\n  ProfilePageActionTypes,\r\n  profilePageReducer,\r\n} from '../features/Profile/profilePageReducer'\r\nimport {\r\n  DialogsActionTypes,\r\n  dialogsPageReducer,\r\n} from '../features/Dialogs/dialogsPageReducer'\r\nimport {\r\n  userPageReducer,\r\n  UserPeducerActionType,\r\n} from '../features/Users/userReducer'\r\nimport { AuthMeActionTypes, authReducer } from '../features/Login/authMeReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profilePageReducer,\r\n  dialogsPage: dialogsPageReducer,\r\n  userPage: userPageReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  form: formReducer,\r\n})\r\n\r\n//store type\r\n// export let store = createStore(rootReducer, applyMiddleware(thunkMiddlewere))\r\n\r\nexport type StoreType = typeof store\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type GetAppStateType = () => AppStateType;\r\n\r\nexport type AppActionsType =\r\n  | AppActionType\r\n  | AuthMeActionTypes\r\n  | DialogsActionTypes\r\n  | ProfilePageActionTypes\r\n  | UserPeducerActionType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  AppStateType,\r\n  unknown,\r\n  AppActionsType\r\n>\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n)\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderPropsType = {\r\n    login: string | null\r\n    logout: () => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div>\r\n                <img src=\"https://seeklogo.com/images/F/for-family-sign-logo-570FC31D35-seeklogo.com.png\" />\r\n                <h2>FamilyTalk</h2>\r\n            </div>\r\n            <div className={s.loginBlok}>\r\n                {\r\n                    props.isAuth ?\r\n                     <div>\r\n                        {props.login} - <button onClick={props.logout}>Log out</button>\r\n                     </div> \r\n                     : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import axios from 'axios';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authMe } from '../../features/Login/authMeReducer';\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport {logout} from '../../features/Login/authMeReducer';\r\nimport Header from './Header';\r\n\r\n\r\ntype HeaderPropsType = mapStateToPropsType & mapDispatchtoPropsType;\r\n\r\ntype mapDispatchtoPropsType = {\r\n    authMe: () => void;\r\n    logout: () => void\r\n}\r\n\r\nexport class HeaderContainer extends React.Component<HeaderPropsType>  {\r\n    componentDidMount() {\r\n        this.props.authMe()\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Header login={this.props.login} logout={this.props.logout} isAuth={this.props.isAuth} />\r\n    }\r\n}\r\ntype mapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        login: state.auth.data.login,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { authMe, logout })(HeaderContainer)\r\n","import React, { DetailedHTMLProps, TextareaHTMLAttributes } from 'react';\r\nimport style from './FormControls.module.css'\r\n\r\n\r\n\r\nexport const Textarea: React.FC<any> = (\r\n    { input, meta, ...props }\r\n) => {\r\n    const isError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea\r\n                    {...input}\r\n                    {...props} />\r\n            </div>\r\n            {isError && <span className={style.span}>{meta.error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Input: React.FC<any> = (\r\n    { input, meta, ...props }\r\n) => {\r\n    const isError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input\r\n                    {...input}\r\n                    {...props} />\r\n            </div>\r\n            {isError && <span className={style.span}>{meta.error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Field } from 'redux-form';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} simbols!`;\r\n    return undefined;\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validator: any, props: any = {}, text: string = \"\") => {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            component={component}\r\n            validate={validator}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport { Input } from '../../components/FormControls/FormControls';\r\nimport { createField, required } from '../../utils/validators';\r\nimport { login } from './authMeReducer';\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n\r\n    }\r\n    const isAuth = props.isAuth && <Redirect to=\"/Profile\" />\r\n    return (\r\n        <div>\r\n            {isAuth}\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n\r\n        </div>\r\n    )\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            {createField(\"Login\", \"email\", Input, [required],)}\r\n            {createField(\"password\", \"password\", Input, [required], { type: \"password\" })}\r\n            {createField(null, \"rememberMe\", Input, [], { type: \"checkbox\" }, \"remember me\")}\r\n            {\r\n                props.error && <div style={{ color: 'red' }}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\nconst mstp = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mstp, { login })(Login)","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}><NavLink to=\"/Profile\" activeClassName={s.active}>Profile</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Dialogs\" activeClassName={s.active}>Messages</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/News\" activeClassName={s.active}>News</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Music\" activeClassName={s.active}>Music</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Settings\" activeClassName={s.active}>Settings</NavLink> </div>\r\n            <div className={s.item}><NavLink to=\"/Users\" activeClassName={s.active}>Users</NavLink> </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { PostsType } from '../MyPosts';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    post: PostsType;\r\n}\r\n\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.ava}>\r\n                <img\r\n                    src=\"https://sun9-54.userapi.com/impg/c858532/v858532894/109aab/QgbYlClVvxk.jpg?size=1280x1280&quality=96&sign=0ffeb8dec673187ed8b61505eecf0cf0&type=album\" />\r\n            </div>\r\n            <div className={s.text}>\r\n                <h5>Abzal Suan</h5>\r\n                <div className={s.items}>\r\n                    <div className={s.message}>{props.post.message}</div>\r\n                    <div className={s.item}>like:{props.post.like}</div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators\";\r\nimport { Textarea } from \"../../../components/FormControls/FormControls\";\r\n\r\nexport type PostsType = {\r\n  id: number\r\n  message: string\r\n  like: number\r\n}\r\ntype MyPostsPropsType = {\r\n  posts: PostsType[];\r\n  addPost: (newPostText: string) => void\r\n};\r\n\r\nfunction MyPosts(props: MyPostsPropsType) {\r\n  let postData = props.posts.map((post) => (\r\n    <Post key={post.id} post={post} />\r\n  ));\r\n\r\n\r\n\r\n  const onsubmitHandler = (values: FormDataType) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <AddPostsFormContainer onSubmit={onsubmitHandler} />\r\n      {postData}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPosts;\r\ntype FormDataType = {\r\n  newPostText: string\r\n}\r\n\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\nexport const AddPostsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.addPost}>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          placeholder=\"Enter new post text\"\r\n          validate={[required, maxLength30]} />\r\n        <button>add post</button>\r\n      </div>\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\nconst AddPostsFormContainer = reduxForm<FormDataType>({\r\n  form: \"AddPostsForm\"\r\n})(AddPostsForm)","import React, { ChangeEvent } from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { AppStateType } from \"../../../App/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AddPostAC } from \"../profilePageReducer\";\r\n\r\ntype MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    addPost: (newPostText: string) => { dispatch(AddPostAC(newPostText)); },\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, { ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n    state: StateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatusTC(this.state.status)\r\n    }\r\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div onDoubleClick={this.activateEditMode}>\r\n                        <b>status: </b><span>{this.props.status}</span>\r\n                    </div>}\r\n                {this.state.editMode &&\r\n                    <div onBlur={this.deactivateEditMode}  >\r\n                        <input onChange={this.onChangeHandler} autoFocus type=\"text\" value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { AppStateType } from \"../../../../App/redux-store\"\r\nimport { Input, Textarea } from \"../../../../components/FormControls/FormControls\"\r\nimport { createField, required } from \"../../../../utils/validators\"\r\nimport { ProfileType } from \"../../profilePageReducer\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype EditProfilePropsType = {\r\n    profile: ProfileType\r\n    setEditMode: () => void\r\n    updateProfile: (profileData: ProfileType) => void\r\n}\r\n\r\nexport const EditProfile: React.FC<EditProfilePropsType> = ({ profile, setEditMode, updateProfile }) => {\r\n    const handleSummit = (form: EditProfileFormDataType) => {\r\n        // setEditMode()\r\n        let profileData = {\r\n            ...form\r\n        } as ProfileType\r\n        updateProfile(profileData)\r\n\r\n    }\r\n    return <div>\r\n        <EditProfileFormRedux initialValues={profile} onSubmit={handleSummit} />\r\n    </div>\r\n}\r\n\r\nexport type EditProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\nexport const EditProfileForm: React.FC<InjectedFormProps<EditProfileFormDataType>> = (props) => {\r\n    const profile = useSelector<AppStateType, ProfileType | null>(state => state.profilePage.profile)\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <b>Full name: </b> {createField(\"Full name\", \"fullName\", Input, [],)}\r\n            <b>About me: </b> {createField(\"About me\", \"aboutMe\", Textarea, [])}\r\n            <b>Looking for a job: </b>{createField(\"Looking for a job\", \"lookingForAJob\", Input, [], { type: \"checkbox\" })}\r\n            <b>Looling for a jop description: </b>\r\n            {\r\n                createField(\"Looling for a jop description\",\r\n                    \"lookingForAJobDescription\",\r\n                    Textarea, [required])\r\n            }\r\n            <div>\r\n                {/* @ts-ignore*/}\r\n                <b>Contacts: </b> {Object.keys(profile?.contacts).map(key => {\r\n                    return <div key={key} >\r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, Input, [],)}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            {\r\n                props.error && <div style={{ color: 'red' }}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const EditProfileFormRedux = reduxForm<EditProfileFormDataType>({\r\n    // a unique name for the form\r\n    form: 'editProfile'\r\n})(EditProfileForm)\r\n\r\n\r\n","import React, { useState } from \"react\"\r\nimport { createField } from \"../../../../utils/validators\"\r\nimport { ProfileType } from \"../../profilePageReducer\"\r\nimport { EditProfile } from \"../ProfieStatus/EditProfile\"\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    updateProfile: (profileData: ProfileType) => void\r\n}\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, updateProfile }) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                editMode\r\n                    ? <div>\r\n                        <EditProfile profile={profile} setEditMode={() => setEditMode(false)} updateProfile={updateProfile} />\r\n                    </div>\r\n                    : <div>\r\n                        <div>\r\n                            <b>Full name: </b> {profile?.fullName}\r\n                        </div>\r\n                        <div>\r\n                            <b>About me: </b> {profile?.aboutMe}\r\n                        </div>\r\n                        <div>\r\n                            <b>Looking for a job: </b> {profile?.lookingForAJob ? <p>yes</p> : <p>no</p>}\r\n                        </div>\r\n                        <div>\r\n                            {profile?.lookingForAJob && profile.lookingForAJobDescription}\r\n                        </div>\r\n                        <div>\r\n                            {/* @ts-ignore*/}\r\n                            <b>Contacts:  </b> {Object.keys(profile.contacts).map(key => {\r\n                                {/* @ts-ignore*/ }\r\n                                return <Contact key={key} contactTitle={key} contactValue={profile?.contacts[key]} />\r\n                            })}\r\n                        </div>\r\n                        {isOwner && <button onClick={() => setEditMode(true)}>Edit profile info</button>}\r\n                    </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div> <b>{contactTitle}: </b> {contactValue} </div>\r\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { Preloader } from '../../../components/preloader/Preloader';\r\nimport { ProfileType } from '../profilePageReducer';\r\nimport { ProfileStatus } from './ProfieStatus/ProfileStatus';\r\nimport userPhoto from \"../../../assets/images/user.png\"\r\nimport s from './ProfileInfo.module.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { ProfileData } from './ProfieData/ProfileData';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatusTC: (status: string) => void\r\n    savePhoto: (photo: any) => void // fix any\r\n    updateProfile: (profileData: ProfileType) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n    profile,\r\n    status,\r\n    isOwner,\r\n    updateStatusTC,\r\n    savePhoto,\r\n    updateProfile\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n\r\n    }, [profile]);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <img src={ profile.photos.large || userPhoto} className={s.profilePhoto} />\r\n            {isOwner && <input type=\"file\" onChange={onChangeHandler} />}\r\n\r\n            <ProfileStatus status={status} updateStatusTC={updateStatusTC} />\r\n\r\n            <ProfileData profile={profile} isOwner={isOwner} updateProfile={updateProfile} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport { ProfileType } from './profilePageReducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatusTC: (status: string) => void\r\n    savePhoto: (photo: any) => void // fix any\r\n    updateProfile: (profileData: ProfileType) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatusTC={props.updateStatusTC}\r\n                savePhoto={props.savePhoto}\r\n                updateProfile={props.updateProfile}\r\n            />\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n","import axios from 'axios';\r\nimport React, { Props, ReactComponentElement, useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { AppStateType } from '../../App/redux-store';\r\nimport Profile from './Profile';\r\nimport {\r\n    ProfileType,\r\n    setUserProfileAC,\r\n    getProfile,\r\n    setStatusTC,\r\n    updateStatusTC,\r\n    savePhoto,\r\n    updateProfile\r\n} from '../Profile/profilePageReducer'\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../components/HOC/withAuthRedirect';\r\n\r\n\r\ntype ProfilePropsType = mapStatePropsType & mapDispatchPropsType;\r\n\r\ntype mapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId: null | number\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    setUserProfileAC: (profile: ProfileType) => void\r\n    getProfile: (userId: number | string) => void\r\n    setStatusTC: (userId: number | string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhoto: (photo: any) => void\r\n    updateProfile: (profileData: ProfileType) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfileIfo() {\r\n        let userIds = this.props.match.params.userId;\r\n        let userId = parseInt(userIds)\r\n        if (!userId) {\r\n            if (this.props.userId === null) {\r\n                this.props.history.push(\"/login\")\r\n            } else (\r\n                userId = this.props.userId\r\n            )\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.setStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfileIfo()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfileIfo()\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                <Profile isOwner={!this.props.match.params.userId} {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.data.id\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { setUserProfileAC, getProfile, setStatusTC, updateStatusTC, savePhoto, updateProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./Messages.module.css\";\r\n\r\n\r\n\r\ntype messagesPropsType = {\r\n  message: string\r\n};\r\n\r\nexport const Messages = (props: messagesPropsType) => {\r\n  return (\r\n    <div>\r\n      {props.message}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport { Messages } from \"./Messages/Messages\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { DialogsPageType } from \"./dialogsPageReducer\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators\";\r\nimport { Textarea } from \"../../components/FormControls/FormControls\";\r\n\r\n\r\ntype PropsType = {\r\n  state: DialogsPageType\r\n  sendMessage: (newMessage: string) => void\r\n};\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n\r\n\r\n  let dialogElement = props.state.dialogs.map((d) =>\r\n    <Dialog id={d.id} name={d.name} />\r\n  );\r\n  let messagesElement = props.state.messages.map((m) =>\r\n    <Messages key={m.id} message={m.message} />\r\n  )\r\n\r\n\r\n\r\n  const onSubmitHandler = (values: FormDataType) => {\r\n    props.sendMessage(values.newMessageText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogElement}</div>\r\n      <div className={s.grids}>\r\n        <div className={s.messages}>\r\n          {messagesElement}\r\n        </div>\r\n        <DialogAddMessageForm onSubmit={onSubmitHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\nconst Dialog = (props: DialogType) => {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={\"/Dialogs/\" + props.id}>{props.name} </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ntype FormDataType = {\r\n  newMessageText: string\r\n\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.textarea}>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newMessageText\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLength50]} />\r\n        <button> sent message</button>\r\n      </div>\r\n    </form>\r\n\r\n  )\r\n}\r\n\r\n\r\nconst DialogAddMessageForm = reduxForm<FormDataType>({\r\n  // a unique name for the form\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { DialogsPageType, sendMessageAC } from \"./dialogsPageReducer\";\r\nimport { AppStateType } from \"../../App/redux-store\";\r\nimport { withAuthRedirect } from \"../../components/HOC/withAuthRedirect\";\r\n\r\ntype MapDispatchPropsType = {\r\n  sendMessage: (newMessage: string) => void\r\n};\r\n\r\ntype mapStatePropsType = {\r\n  state: DialogsPageType\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n  return {\r\n    state: state.dialogsPage,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    sendMessage: (newMessage: string) => { dispatch(sendMessageAC(newMessage)); }\r\n\r\n  }\r\n}\r\n\r\ntype DialogsContainerPropsType = mapStatePropsType & MapDispatchPropsType;\r\n\r\nexport class DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div >\r\n        <Dialogs {...this.props} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(DialogsContainer));\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n\r\n","import React from 'react';\r\nimport { Preloader } from '../preloader/Preloader';\r\nimport s from './InitialScreen.module.css'\r\n\r\nexport const InitialScreen = () => {\r\n    return (\r\n        <div  className={s.wrapper}>\r\n            <Preloader />\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, withRouter } from \"react-router-dom\";\r\nimport HeaderContainer from \"../features/Header/HeaderContainer\";\r\nimport Login from \"../features/Login/Login\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { initializeApp } from \"./appReducer\";\r\nimport { AppStateType } from \"./redux-store\";\r\nimport Navbar from \"../features/Navbar/Navbar\";\r\nimport ProfileContainer from \"../features/Profile/ProfileContainer\";\r\nimport DialogsContainer from \"../features/Dialogs/DialogsContainer\";\r\nimport { withSuspense } from \"../components/HOC/withSuspense\";\r\nimport { InitialScreen } from \"../components/InitialScreen/InitialScreen\";\r\n// import UsersContainer from \"../features/Users/UsersContainer\";\r\nconst UsersContainer = React.lazy(() => import('../features/Users/UsersContainer'));\r\n\r\n\r\ntype PropsType = {\r\n  initialized: boolean\r\n  initializeApp: () => void\r\n};\r\n\r\nclass App extends React.Component<PropsType>  {\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <div>\r\n        <InitialScreen />\r\n      </div>\r\n    }\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Route\r\n            path=\"/Profile/:userId?\"\r\n            render={() => (\r\n              <ProfileContainer />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/Dialogs\"\r\n            render={() => (\r\n              <DialogsContainer />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/Users\"\r\n            render={withSuspense(UsersContainer)}\r\n          />\r\n          <Route path=\"/Login\" component={Login} />\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nconst mstp = (state: AppStateType) => ({\r\n  initialized: state.app.initialized\r\n})\r\nexport default compose<React.ComponentType>(\r\n  connect(mstp, { initializeApp }),\r\n  withRouter,\r\n)(App)","import React from 'react'\r\n\r\n\r\nexport const withSuspense = (Component: any) => (props: any) => {\r\n    return <React.Suspense fallback={<div>Loading...</div>}>\r\n        <Component {...props} />\r\n    </React.Suspense>\r\n}\r\n","import \"./index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { AppStateType, store } from \"./App/redux-store\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App/App\";\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__bklIq\",\"grids\":\"Dialogs_grids__mJrxB\",\"textarea\":\"Dialogs_textarea__WbrPc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__2B242\",\"ava\":\"Post_ava__2UxNp\",\"message\":\"Post_message__otDn9\"};","import React, { ComponentType } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { AppStateType } from '../../App/redux-store'\r\n\r\ntype mstpType = {\r\n    isAuth: boolean\r\n}\r\nconst mstp = (state: AppStateType): mstpType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mstpType) => {\r\n        let { isAuth, ...resProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/Login\"} />\r\n        return <Component {...resProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mstp)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export default __webpack_public_path__ + \"static/media/Spinner.f22d5cb7.gif\";","import React, { ChangeEvent } from \"react\";\r\nimport preloader from \"../../assets/preloader/Spinner.gif\"\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} />\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3TZHZ\",\"loginBlok\":\"Header_loginBlok__2VMbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"FormControls_span__38QLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPosts_wrapper__1E_Yn\",\"addPost\":\"MyPosts_addPost__1d-K5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePhoto\":\"ProfileInfo_profilePhoto__18h-X\"};"],"sourceRoot":""}